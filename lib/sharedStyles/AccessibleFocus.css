/**
 * AccessibleFocus
 * @variables-needs-updating
 */

@import '../variables.css';

:root {
  --focus-dot-offset-default: 4px;
  --focus-dot-offset-small: -5px;
  --focus-dot-offset-medium: -10px;
  --focus-dot-offset-large: -15px;
  --box-offset-small: -5px;
  --box-offset-medium: -10px;
  --box-offset-large: -15px;
}

.accessibleFocusRoot {
  position: relative;
  outline: none;
  z-index: 1;
}

.accessibleFocusRoot.flex {
  display: flex;
}

.wrappedInner {
  display: flex;
  align-items: center;
}

.accessibleFocusRoot * {
  z-index: 2;
}

/**
 * Disabled state
 */
:disabled > .accessibleFocusRoot,
.accessibleFocusRoot:disabled {
  opacity: 0.5;
  cursor: default;

  &::after,
  &::before {
    display: none;
  }
}

/**
 * Focus/active pseudo element
 */
.accessibleFocusRoot::before {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: transparent;
  border-radius: var(--radius);
  z-index: -1;
}

/**
 * Focus Dot pseudo element
 */
.accessibleFocusRoot::after {
  content: "";
  opacity: 0;
  visibility: hidden;
  font-size: 0.7em;
  position: absolute;
  transform: translateY(-50%) scale(1);
  width: calc(var(--gutter) / 4.2);
  height: calc(var(--gutter) / 4.2);
  border-radius: 999px;
  display: flex;
  flex-flow: column nowrap;
  justify-content: center;
  align-items: center;
  z-index: 2;
  background-color: rgb(0, 0, 0);
}

/* Focus dot start */
:not([dir="rtl"]) .accessibleFocusRoot.focusDotPositionStart::after {
  left: var(--focus-dot-offset-default);
  top: 50%;
}

[dir="rtl"] .accessibleFocusRoot.focusDotPositionStart::after {
  right: var(--focus-dot-offset-default);
  top: 50%;
}

/* Focus dot end */
:not([dir="rtl"]) .accessibleFocusRoot.focusDotPositionEnd::after {
  right: var(--focus-dot-offset-default);
  top: 50%;
}

[dir="rtl"] .accessibleFocusRoot.focusDotPositionEnd::after {
  left: var(--focus-dot-offset-default);
  top: 50%;
}

/* Focus dot top */
.accessibleFocusRoot.focusDotPositionTop::after {
  top: var(--focus-dot-offset-default);
  transform: translateX(-50%) scale(1);
  left: 50%;
}

/* Focus dot bottom */
.accessibleFocusRoot.focusDotPositionBottom::after {
  bottom: var(--focus-dot-offset-default);
  transform: translateX(-50%) scale(1);
  left: 50%;
}

/**
 * Focus Dot Offsets
 */

/* small focus dot offset */
:not([dir="rtl"]) .accessibleFocusRoot.focusDotPositionStart.focusDotOffsetSmall::after { left: var(--focus-dot-offset-small); }
[dir="rtl"] .accessibleFocusRoot.focusDotPositionStart.focusDotOffsetSmall::after { right: var(--focus-dot-offset-small); }

:not([dir="rtl"]) .accessibleFocusRoot.focusDotPositionEnd.focusDotOffsetSmall::after { right: var(--focus-dot-offset-small); }
[dir="rtl"] .accessibleFocusRoot.focusDotPositionEnd.focusDotOffsetSmall::after { left: var(--focus-dot-offset-small); }

.accessibleFocusRoot.focusDotPositionTop.focusDotOffsetSmall::after { top: var(--focus-dot-offset-small); }
.accessibleFocusRoot.focusDotPositionBottom.focusDotOffsetSmall::after { bottom: var(--focus-dot-offset-small); }

/* medium focus dot offset */
:not([dir="rtl"]) .accessibleFocusRoot.focusDotPositionStart.focusDotOffsetMedium::after { left: var(--focus-dot-offset-medium); }
[dir="rtl"] .accessibleFocusRoot.focusDotPositionStart.focusDotOffsetMedium::after { right: var(--focus-dot-offset-medium); }

:not([dir="rtl"]) .accessibleFocusRoot.focusDotPositionEnd.focusDotOffsetMedium::after { right: var(--focus-dot-offset-medium); }
[dir="rtl"] .accessibleFocusRoot.focusDotPositionEnd.focusDotOffsetMedium::after { left: var(--focus-dot-offset-medium); }

.accessibleFocusRoot.focusDotPositionTop.focusDotOffsetMedium::after { top: var(--focus-dot-offset-medium); }
.accessibleFocusRoot.focusDotPositionBottom.focusDotOffsetMedium::after { bottom: var(--focus-dot-offset-medium); }

/* large focus dot offset */
:not([dir="rtl"]) .accessibleFocusRoot.focusDotPositionStart.focusDotOffsetLarge::after { left: var(--focus-dot-offset-large); }
[dir="rtl"] .accessibleFocusRoot.focusDotPositionStart.focusDotOffsetLarge::after { right: var(--focus-dot-offset-large); }

:not([dir="rtl"]) .accessibleFocusRoot.focusDotPositionEnd.focusDotOffsetLarge::after { right: var(--focus-dot-offset-large); }
[dir="rtl"] .accessibleFocusRoot.focusDotPositionEnd.focusDotOffsetLarge::after { left: var(--focus-dot-offset-large); }

.accessibleFocusRoot.focusDotPositionTop.focusDotOffsetLarge::after { top: var(--focus-dot-offset-large); }
.accessibleFocusRoot.focusDotPositionBottom.focusDotOffsetLarge::after { bottom: var(--focus-dot-offset-large); }

/**
 * Hover
 */
button:hover > .accessibleFocusRoot::before,
a:hover > .accessibleFocusRoot::before,
button.accessibleFocusRoot:hover::before,
label.accessibleFocusRoot:hover::before,
input:hover + label.accessibleFocusRoot::before,
a.accessibleFocusRoot:hover::before {
  background: rgba(37, 118, 195, 0.2);
}

a.accessibleFocusRoot:hover,
button.accessibleFocusRoot:hover {
  cursor: pointer;
}

/**
 * Focus
 */
.accessibleFocusRoot.isFocused::before,
button:focus > .accessibleFocusRoot::before,
a:focus > .accessibleFocusRoot::before,
button.accessibleFocusRoot:focus::before,
label.accessibleFocusRoot:focus::before,
input:focus + label.accessibleFocusRoot::before,
a.accessibleFocusRoot:focus::before {
  background: rgba(37, 118, 195, 0.3);
  border: 1px solid rgba(0, 0, 0, 0.2);
  box-shadow: 0 0 0 3px rgba(37, 118, 195, 0.3);
}

.accessibleFocusRoot.isFocused.hasDot::after,
button:focus > .accessibleFocusRoot.hasDot::after,
a:focus > .accessibleFocusRoot.hasDot::after,
button.accessibleFocusRoot.hasDot:focus::after,
label.accessibleFocusRoot.hasDot:focus::after,
input:focus + label.accessibleFocusRoot.hasDot::after,
a.accessibleFocusRoot.hasDot:focus::after {
  visibility: visible;
  opacity: 1;
}

/**
 * Active
 */
button:not([disabled]):active > .accessibleFocusRoot,
a:not([disabled]):active > .accessibleFocusRoot,
button.accessibleFocusRoot:not([disabled]):active,
label.accessibleFocusRoot:not([disabled]):active,
input:not([disabled]):active + label.accessibleFocusRoot,
a.accessibleFocusRoot:not([disabled]):active {
  color: #fff;
  & * { color: #fff; }
  & svg { fill: #fff; }
}

button:active > .accessibleFocusRoot::before,
a:active > .accessibleFocusRoot::before,
button.accessibleFocusRoot:active::before,
label.accessibleFocusRoot:active::before,
input:active + label.accessibleFocusRoot::before,
a.accessibleFocusRoot:active::before {
  background: rgb(37, 118, 195);
  border: 1px solid rgba(0, 0, 0, 0.2);
  color: rgb(255, 255, 255);
}

button:active > .accessibleFocusRoot.hasDot::after,
a:active > .accessibleFocusRoot.hasDot::after,
button.accessibleFocusRoot.hasDot:active::after,
label.accessibleFocusRoot.hasDot:active::after,
input:active + label.accessibleFocusRoot.hasDot::after,
a.accessibleFocusRoot.hasDot:active::after {
  background-color: #fff;
  visibility: visible;
  opacity: 1;
}

/**
 * Box Offset
 */

/* Apply to all sides */
.accessibleFocusRoot.boxOffsetSmall::before {
  left: var(--box-offset-small);
  right: var(--box-offset-small);
  top: var(--box-offset-small);
  bottom: var(--box-offset-small);
}

.accessibleFocusRoot.boxOffsetMedium::before {
  left: var(--box-offset-medium);
  right: var(--box-offset-medium);
  top: var(--box-offset-medium);
  bottom: var(--box-offset-medium);
}

.accessibleFocusRoot.boxOffsetLarge::before {
  left: var(--box-offset-large);
  right: var(--box-offset-large);
  top: var(--box-offset-large);
  bottom: var(--box-offset-large);
}

/* Apply to start only */
:not([dir="rtl"]) .accessibleFocusRoot.boxOffsetStartSmall::before { left: var(--box-offset-small); }
[dir="rtl"] .accessibleFocusRoot.boxOffsetStartSmall::before { right: var(--box-offset-small); }

:not([dir="rtl"]) .accessibleFocusRoot.boxOffsetStartMedium::before { left: var(--box-offset-medium); }
[dir="rtl"] .accessibleFocusRoot.boxOffsetStartMedium::before { right: var(--box-offset-medium); }

:not([dir="rtl"]) .accessibleFocusRoot.boxOffsetStartLarge::before { left: var(--box-offset-large); }
[dir="rtl"] .accessibleFocusRoot.boxOffsetStartLarge::before { right: var(--box-offset-large); }

/* Apply to end only */
:not([dir="rtl"]) .accessibleFocusRoot.boxOffsetEndSmall::before { right: var(--box-offset-small); }
[dir="rtl"] .accessibleFocusRoot.boxOffsetEndSmall::before { left: var(--box-offset-small); }

:not([dir="rtl"]) .accessibleFocusRoot.boxOffsetEndMedium::before { right: var(--box-offset-medium); }
[dir="rtl"] .accessibleFocusRoot.boxOffsetEndMedium::before { left: var(--box-offset-medium); }

:not([dir="rtl"]) .accessibleFocusRoot.boxOffsetEndLarge::before { right: var(--box-offset-large); }
[dir="rtl"] .accessibleFocusRoot.boxOffsetEndLarge::before { left: var(--box-offset-large); }

/* Apply to top only */
.accessibleFocusRoot.boxOffsetTopSmall::before { top: var(--box-offset-small); }
.accessibleFocusRoot.boxOffsetTopMedium::before { top: var(--box-offset-medium); }
.accessibleFocusRoot.boxOffsetTopLarge::before { top: var(--box-offset-large); }

/* Apply to bottom only */
.accessibleFocusRoot.boxOffsetBottomSmall::before { bottom: var(--box-offset-small); }
.accessibleFocusRoot.boxOffsetBottomMedium::before { bottom: var(--box-offset-medium); }
.accessibleFocusRoot.boxOffsetBottomLarge::before { bottom: var(--box-offset-large); }
