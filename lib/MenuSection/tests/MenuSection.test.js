/**
 * MenuSection tests
 */

import React from 'react';
import { describe, beforeEach, it } from 'mocha';
import { HTML, including } from '@folio/stripes-testing';
import { RoledHTML } from '../../../tests/helpers/localInteractors';

import { mount } from '../../../tests/helpers';

import MenuSection from '../MenuSection';
// import MenuSectionInteractor from './interactor';

const MenuSectionInteractor = HTML.extend('menu section')
  .selector('[class^=menuSection--]')
  .locator((el) => el.querySelector('[data-test-menu-section-label]').textContent)
  .filters({
    idPresent: (el) => !!el.id
  });

describe('MenuSection', () => {
  const menuSection = MenuSectionInteractor();
  const label = 'My label';
  const labelTag = 'h2';
  const id = 'my-id';
  const content = <div>Some content</div>;
  const className = 'some-class-name';

  beforeEach(async () => {
    await mount(
      <MenuSection id={id} label={label} className={className} labelTag={labelTag}>
        {content}
      </MenuSection>
    );
  });

  it('Should apply an ID to the root element if provided', () => menuSection.has({ id }));

  it('Should render a label if a node/string is passed to the label-prop', () => MenuSectionInteractor(label).exists());

  it('Should render content when passing anything as children', () => HTML('Some content').exists());

  it('Should apply any custom class passed to the className-prop', () => menuSection.has({ className: including(className) }));

  it(`Should render a label (<Headline>) with a labelTag of ${labelTag}`, () => RoledHTML({ tagName: labelTag.toUpperCase() }).exists());

  describe('If no ID is provided', () => {
    beforeEach(async () => {
      await mount(
        <MenuSection />
      );
    });

    it('Should apply an autogenerated ID to the root element', () => menuSection.has({ visible: false, idPresent: true }));
  });
});
