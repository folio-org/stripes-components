@import '../variables.css';

:root {
  --radio-button-size: 12px;
}

.radioButton {
  display: flex;
  align-items: center;

  &.inline {
    display: inline-flex;
  }

  &.marginBottom0 {
    margin-bottom: 0;
  }
}

.labelText {
  margin: 0 6px;
  display: flex;
  align-items: center;
}

.radioLabel {
  padding: var(--input-vertical-padding) var(--input-horizontal-padding);
  position: relative;
  line-height: var(--line-height);
  display: flex;
  align-items: baseline;
  cursor: pointer;
  flex-grow: 2;
  border-radius: var(--radius);
  font-size: var(--font-size-medium);

  &.error {
    color: var(--error);

    &::before {
      border-color: var(--error) !important;
    }
  }
}

.labelInteractionStyles {
  composes: interactionStyles from "../sharedStyles/interactionStyles.css";
}

.labelFocused {
  composes: isFocused from "../sharedStyles/interactionStyles.css";
}

.labelPseudo {
  position: relative;
  width: var(--radio-button-size);
  height: var(--radio-button-size);
  border: 1px solid var(--color-border);
  border-radius: 999px;
  background: #fff;
  flex-shrink: 0;
}

.labelPseudo::after {
  content: '';
  width: 6px;
  height: 6px;
  background-color: #000;
  position: absolute;
  top: 2px;
  left: 2px;
  border-radius: 999px;
  transition: all 0.2s ease;
}

.labelDisabled {
  color: var(--color-text-p2);

  &:hover {
    cursor: not-allowed;
  }

  & .labelPseudo {
    opacity: 0.5;
  }
}

.input {
  position: absolute;
  z-index: -1;
  clip: rect(1px, 1px, 1px, 1px);
}

.input:not(:checked) + .labelPseudo::after {
  opacity: 0;
  -webkit-transform: scale(0);
  transform: scale(0);
}

.input:checked + .labelPseudo {
  background-color: #fff;

  &::after {
    opacity: 1;
    -webkit-transform: scale(1);
    transform: scale(1);
    background-color: #000;
  }
}

/**
 * Feedback
 */
.radioFeedback {
  font-size: 12px;
}

.hasWarning {
  & .radioFeedback {
    color: var(--warn);
  }

  & .input {
    border-color: var(--warn);
  }
}

.hasError {
  & .radioFeedback {
    color: var(--error);
  }

  & .input {
    border-color: var(--error);
  }
}
